buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath 'com.commercehub.gradle.plugin:gradle-avro-plugin:0.8.0'
      //classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.8.2'
    }
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    maven {
        url "s3://op-repo/releases"
        credentials(AwsCredentials) {
            // user: op-repo-reader
            accessKey "AKIAJ6AZFFSFRJI3IKHQ"
            secretKey "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"
        }
    }
}

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'com.github.johnrengelman.shadow'
//apply plugin: 'scalaStyle'
apply plugin: 'com.commercehub.gradle.plugin.avro'
apply from: 'spark.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// The main class for the application plugin and is currently unused. Setting a dummy one.
mainClassName = "com.salesforce.app.Simple" /* << MAIN_CLASS */

ext {
    scalaVersion = '$scalaVersion'
    scalaVersionRevision = '$scalaVersionRevision'
    junitVersion = '$junitVersion'
    sparkVersion = '$sparkVersion'
    scalatestVersion = '$scalatestVersion'
    opVersion = '$opVersion'

    mainClassName = 'com.salesforce.app.Simple' /* << MAIN_CLASS */
}

configurations {
    scalaLibrary
    scalaCompiler
}

dependencies {
    // Scala
    scalaLibrary "org.scala-lang:scala-library:$scalaVersion.$scalaVersionRevision"
    scalaCompiler "org.scala-lang:scala-compiler:$scalaVersion.$scalaVersionRevision"
    compile "org.scala-lang:scala-library:$scalaVersion.$scalaVersionRevision"

    // Spark
    compileOnly "org.apache.spark:spark-core_$scalaVersion:$sparkVersion"
    testCompile "org.apache.spark:spark-core_$scalaVersion:$sparkVersion"
    compileOnly "org.apache.spark:spark-mllib_$scalaVersion:$sparkVersion"
    testCompile "org.apache.spark:spark-mllib_$scalaVersion:$sparkVersion"
    compileOnly "org.apache.spark:spark-sql_$scalaVersion:$sparkVersion"
    testCompile "org.apache.spark:spark-sql_$scalaVersion:$sparkVersion"

    // Optimus Prime
    compile "com.salesforce:optimus-prime-core_$scalaVersion:$opVersion"

    // Pretrained models used in Octopus Prime, e.g. OpenNLP POS/NER models etc. (optional)
    // compile "com.salesforce:optimus-prime-models_$scalaVersion:$opVersion"

    // Test
    testCompile ("org.scalatest:scalatest_$scalaVersion:${scalatestVersion}")
    testCompile "junit:junit:$junitVersion"

    // Avro
    compileOnly("org.apache.avro:avro:$avroVersion") { exclude group: 'org.mortbay.jetty', module: 'servlet-api' }
    testCompile("org.apache.avro:avro:$avroVersion") { exclude group: 'org.mortbay.jetty', module: 'servlet-api' }
    compileOnly("org.apache.avro:avro-mapred:$avroVersion:$hadoopVersion") { exclude group: 'org.mortbay.jetty', module: 'servlet-api' }
    testCompile("org.apache.avro:avro-mapred:$avroVersion:$hadoopVersion") { exclude group: 'org.mortbay.jetty', module: 'servlet-api' }

    // Spark Avro
    compile ("com.databricks:spark-avro_$scalaVersion:$sparkAvroVersion") { exclude group: "org.apache.avro", module: "avro" }

}

tasks.withType(ScalaCompile) {
    configure(scalaCompileOptions.forkOptions) {
        memoryMaximumSize = '1g'
        jvmArgs = ['-XX:MaxMetaspaceSize=256m']
    }
}
compileScala { scalaCompileOptions.additionalParameters = ["-optimize"] }
compileTestScala { scalaCompileOptions.additionalParameters = ["-Yrangepos"] }
[compileJava, compileTestJava]*.options.collect { options -> options.encoding = 'UTF-8' }

jar {
    manifest.attributes "Main-Class": "\$mainClassName"
    baseName="\${rootProject.name}"
}

shadowJar {
    zip64 = true
    exclude 'META-INF/**'
    manifest.attributes "Main-Class": "\$mainClassName"
    baseName = project.name + '-with-dependencies'
}

avro {
    createSetters = true
    fieldVisibility = "PUBLIC_DEPRECATED"
    outputCharacterEncoding = "UTF-8"
    stringType = "String"
}

sourceSets {
    main {
        java {
            srcDir 'build/generated-main-avro-java'
        }
    }
}

configurations.all { resolutionStrategy.cacheChangingModulesFor 0, 'seconds' }

task repl(type: JavaExec) {
    description 'Start Scala repl.'
    main = "scala.tools.nsc.MainGenericRunner"
    classpath = sourceSets.main.runtimeClasspath
    standardInput System.in
    args '-usejavacp'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.7'
    description "Sets the Gradle wrapper version."
}
